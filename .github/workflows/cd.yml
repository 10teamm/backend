name: CD

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-22.04 # NCP Server version
    environment: ${{ github.ref == 'refs/heads/main' && 'Product' || 'Develop' }}
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate application.properties from Secrets
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.PROPERTIES }}" > src/main/resources/application.properties

      - name: Give execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: Upload test report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test

      - name: Upload build artifact # only cd.yml
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: build/libs/*-SNAPSHOT.jar
          retention-days: 1

  # develop
  deploy_dev:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-22.04 # NCP Server version
    environment: Develop
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Copy JAR to Server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.NCP_SERVER_IP }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
          source: "*-SNAPSHOT.jar"
          target: ${{ secrets.NCP_SERVER_PATH }}

      - name: Deploy application
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.NCP_SERVER_IP }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.NCP_SERVER_PATH }}
            chmod -R 755 log
            # 실행 중인 애플리케이션 중지 및 중지 실패 시 action 중단 방지
            if [ -f pid.file ]; then
              kill $(cat pid.file) || true
              rm pid.file
              sleep 5
            fi

            # 새 애플리케이션 실행 - 일단 임시로 와일드 카드 사용
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            nohup java -jar -Dspring.profiles.active=dev *-SNAPSHOT.jar > /dev/null 2>&1 & echo $! > pid.file
            echo "Development server deploy done."

  # product
  deploy_prod:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04 # NCP Server version
    environment: Product
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Copy JAR to Server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.NCP_SERVER_IP }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
          source: "*-SNAPSHOT.jar"
          target: ${{ secrets.NCP_SERVER_PATH }}

      - name: Deploy application
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.NCP_SERVER_IP }}
          username: ${{ secrets.NCP_SERVER_USER }}
          key: ${{ secrets.NCP_SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.NCP_SERVER_PATH }}
            chmod -R 755 log
            # 실행 중인 애플리케이션 중지 및 중지 실패 시 action 중단 방지
            if [ -f pid.file ]; then
              kill $(cat pid.file) || true
              rm pid.file
              sleep 5
            fi

            # 새 애플리케이션 실행 - 일단 임시로 와일드 카드 사용
            nohup java -jar -Dspring.profiles.active=prod *-SNAPSHOT.jar > /prod/null 2>&1 & echo $! > pid.file
            echo "Production server deploy done."
